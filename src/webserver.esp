void ICACHE_FLASH_ATTR setupWebServer() {
	server.addHandler(&ws);
	ws.onEvent(onWsEvent);
	server.onNotFound([](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse(404, "text/plain", "Not found");
		request->send(response);
	});
	server.on("/update", HTTP_POST, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse * response = request->beginResponse(200, "text/plain", shouldReboot ? "OK" : "FAIL");
		response->addHeader("Connection", "close");
		request->send(response);
	}, [](AsyncWebServerRequest *request, String filename, size_t index, uint8_t *data, size_t len, bool final) {
		if (!request->authenticate(httpUsername, config.httpPass)) {
			return;
		}
		if (!index) {
			writeEvent("INFO", "updt", "Firmware update started", filename.c_str());
			Update.runAsync(true);
			if (!Update.begin((ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000)) {
				writeEvent("ERRO", "updt", "Not enough space to update","");
				#ifdef DEBUG
				Update.printError(Serial);
				#endif
			}
		}
		if (!Update.hasError()) {
			if (Update.write(data, len) != len) {
				writeEvent("ERRO", "updt", "Writing to flash is failed", filename.c_str());
				#ifdef DEBUG
				Update.printError(Serial);
				#endif
			}
		}
		if (final) {
			if (Update.end(true)) {
				writeEvent("INFO", "updt", "Firmware update is finished", "");
#ifdef DEBUG
				Serial.printf("[ UPDT ] Firmware update finished: %uB\n", index + len);
#endif
				shouldReboot = !Update.hasError();
			} else {
				writeEvent("ERRO", "updt", "Update is failed", "");
				#ifdef DEBUG
				Update.printError(Serial);
				#endif
			}
		}
	});
	server.on("/fonts/glyphicons-halflings-regular.woff", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "font/woff", glyphicons_halflings_regular_woff_gz, glyphicons_halflings_regular_woff_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/css/required.css", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/css", required_css_gz, required_css_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/js/required.js", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", required_js_gz, required_js_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});
	server.on("/js/esprfid.js", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/javascript", esprfid_js_gz, esprfid_js_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});

	server.on("/index.html", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", index_html_gz, index_html_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});

	server.on("/esprfid.htm", HTTP_GET, [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", esprfid_htm_gz, esprfid_htm_gz_len);
		response->addHeader("Content-Encoding", "gzip");
		request->send(response);
	});

/*
	server.on("/upload", HTTP_GET, [](AsyncWebServerRequest *request) {
		HTTPUpload& upload = server.upload();
  		if (upload.status == UPLOAD_FILE_START) {
    		String filename = upload.filename;
    		Serial.print("[ INFO ] handleFileUpload Name: "); Serial.println(filename);
    		if (filename.length() > 30) {
      			int x = filename.length() - 30;
      			filename = filename.substring(x, 30 + x);
    		}
    		if (!filename.startsWith("/")) filename = "/" + filename;
    		Serial.print("[ INFO ] handleFileUpload Name: "); Serial.println(filename);
    		fsUploadFile = SPIFFS.open(filename, "w");
    		filename = String();
  		} else if (upload.status == UPLOAD_FILE_WRITE) {
    		Serial.print("[ INFO ] handleFileUpload Data: "); Serial.println(upload.currentSize);
    		if (fsUploadFile)
      			fsUploadFile.write(upload.buf, upload.currentSize);
  		} else if (upload.status == UPLOAD_FILE_END) {
    		if (fsUploadFile)
      			fsUploadFile.close();
    		yield();
    		Serial.print("[ INFO ] handleFileUpload Size: "); Serial.println(upload.totalSize);
    		handleRoot();
  		}
	}
*/

	server.on("/file", HTTP_GET, [](AsyncWebServerRequest *request) {
		FSInfo fs_info;
 		SPIFFS.info(fs_info);
  		String temp;

		String filename = request->url();
		filename = filename.substring(5);

		if(request->hasArg("download")) 
		{
			Serial.print(F("[ INFO ] DOWNLOAD FILENAME: "));
			Serial.println(filename);

			AsyncWebServerResponse *response = request->beginResponse(SPIFFS, filename, String(), true);
			response->addHeader("Content-Type", "application/json");
			request->send(response);
		} 
		if (request->hasArg("Delete")) {
			
			Serial.print(F("[ INFO ] DELETE FILENAME: "));
			Serial.println(filename);

      		SPIFFS.remove(filename);
			                         
    		temp = "<!DOCTYPE HTML><html lang='de'><head><meta charset='UTF-8'><meta name= viewport content=width=device-width, initial-scale=1.0, user-scalable=yes><meta http-equiv='refresh' content='3; URL=/file>";
    		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", temp.c_str());
			request->send(response);
		}
		else 
		{
  			temp += "<!DOCTYPE HTML><html lang='de'><head><meta charset='UTF-8'><meta name= viewport content='width=device-width, initial-scale=1.0,' user-scalable=yes>";
  			temp += "<style type='text/css'><!-- DIV.container { min-height: 10em; display: table-cell; vertical-align: middle }.button {height:35px; width:90px; font-size:16px} -->";
  			temp += "body {background-color: powderblue;}</style></head>\r\n<body><center><h2>ESP 8266 SPIFFS<br>Upload, Download or Delete</h2></center><p>Datei zum Download anklicken: <p>";
  			if (!SPIFFS.begin())  Serial.println("SPIFFS failed to mount !\r\n");
  			Dir dir = SPIFFS.openDir("/");         //Listet die Aktuell im SPIFFS vorhandenen Dateien auf
  			while (dir.next())
  			{
    			temp += "<a href ='/file";
    			temp += dir.fileName();
    			temp += "?download='>";
    			temp += "SPIFFS";
    			temp += dir.fileName();
    			temp += "</a> ";
				temp += formatBytes(dir.fileSize()).c_str();
    			temp += "<br>\r\n";
  			}
			temp += "<form action='/file' method='POST'>Zum löschen per Drag-and-Drop einfügen<br>";
 			temp += "<input type='text' name='Delete' placeholder='Datei hier einfügen' required>\r\n<br>";
  			temp += "<input type='submit' class='button' name='SUBMIT' value='Löschen'></form><p>";
  			temp += "<form method='POST' action='/upload' enctype='multipart/form-data' style='height:35px;'><input type='file' name='upload' style='height:35px; font-size:13px;' required>\r\n<input type='submit' value='Upload' class='button'></form>";
  			temp += "Datei hochladen<p><p>Größe Dateisystem: ";
  			temp += formatBytes(fs_info.totalBytes).c_str();        //Zeigt die Gesamtgröße des Dateispeichers
  			temp += "<br>Davon Verwendet: ";
  			temp += formatBytes(fs_info.usedBytes).c_str();         //Zeigt den von Dateien belegten Speicherplatz
  			temp += "<p>\r\n";
  			temp += "</body></html>\r\n";

  			AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", temp.c_str());
			request->send(response);
		}
	});

	if (config.httpPass == NULL) {
		config.httpPass = strdup("admin");
	}
	server.on("/login", HTTP_GET, [](AsyncWebServerRequest *request) {
		String remoteIP = printIP(request->client()->remoteIP());
		if (!request->authenticate(httpUsername, config.httpPass)) {
			writeEvent("WARN", "websrv", "New login attempt", remoteIP);
			return request->requestAuthentication();
		}
		request->send(200, "text/plain", "Success");
		writeEvent("INFO", "websrv", "Login success!", remoteIP);
	});
	server.rewrite("/", "/index.html");
	server.begin();
}